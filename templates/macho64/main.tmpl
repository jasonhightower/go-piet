{{ define "stmt" -}}
{{ if IsBlock . -}}
  {{ range .Children }}
    {{ template "stmt" . -}}
  {{ end }}
{{- else if IsOp . "dup" -}}
    Dup
{{- else if IsOp . "add" -}}
    Add
{{- else if IsOp . "sub" -}}
    Sub
{{- else if IsOp . "mult" -}}
    Mult
{{- else if IsOp . "div" -}}
    Div
{{- else if IsOp . "pop" -}}
    sub r9, 4         ; pop
{{- else if IsOp . "char_out" -}}
    Chout
{{- else if IsOp . "push" -}}
    Push {{ index .Args 0 }}
{{- else if IsOp . "switch" -}}
    sub r9, 4          ; switch
{{- else if IsOp . "pointer" -}}
    sub r9, 4          ; pointer
{{- else if IsOp . "roll" -}}
    call roll
{{- else if IsOp . "char_in" -}}
    Chin
{{- else if IsOp . "num_in" -}}
    Numin
{{- else if IsOp . "exit" -}}
    Exit
{{- else if IsCall . -}}
  call {{ .Op }}{{ if HasArgs . }} {{ index .Args 0 }}{{ end }}
{{- end }}
{{- end }}

global _main

%macro Exit 0
    mov rax, 0x2000004
    mov rdi, 1
    mov rsi, outmsg
    mov rdx, outmsg.len
    syscall

    mov rax, 0x2000001
    xor rdi, rdi
    syscall
%endmacro

%macro Push 1
    add r9, 4
    mov dword[r9], %1
%endmacro

%macro Pop 1
    mov %1, dword[r9]
    sub r9, 4
%endmacro

%macro Pop2 2
    mov %1, dword[r9]
    sub r9, 4
    mov %2, dword[r9]
    sub r9, 4
%endmacro


%macro Dup 0
    mov ebx, dword[r9]
    Push ebx
%endmacro

%macro Add 0
    Pop2 eax, ebx
    add eax, ebx
    Push eax
%endmacro

%macro Sub 0
    Pop2 eax, ebx
    sub ebx, eax
    Push ebx
%endmacro

%macro Mult 0
    Pop2 ebx, eax
    mul ebx
    Push eax
%endmacro

%macro Div 0
    Pop2 ebx, eax
    div ebx
    Push eax
%endmacro

%macro Chout 0
    mov rax, 0x2000004
    mov rdi, 1
    mov rsi, r9
    mov rdx, 1
    sub r9, 4
    syscall
%endmacro

%macro Chin 0
   mov rax, 0x2000003
   xor rdi, rdi
   add r9, 4
   mov [r9], dword(0) ; zero out 4 bytes in memory
   mov rsi, r9
   mov rdx, 1
   syscall
%endmacro

%macro Numin 0
   Chin
   mov dl, [r9]
   sub dl, 48
   mov [r9], dl
%endmacro

    section .text

swap:
    mov r10d, dword[rsi]
    mov r11d, dword[rdi]
    mov dword[rsi], r11d
    mov dword[rdi], r10d
    ret

reverse:
    start_loop:
        cmp rsi, rdi
        jge end_loop
        call swap
        lea rsi, [rsi + 4]
        lea rdi, [rdi + -4]
        jmp start_loop
    end_loop:
    ret

roll:
    Pop2 ecx, eax
    imul rax, -1
    mov rdi, r9
    lea rsi, [rdi + 4*rax + 4]

    push rdi
    push rsi
    call reverse
    pop rsi

    lea rdi, [rsi + 4*rcx - 4]
    push rsi
    call reverse

    pop rsi
    pop rdi
    lea rsi, [rsi + 4*rcx]
    call reverse
    ret

greater:
    Pop2 ebx, eax
    cmp ebx, eax
    ; should be able to do this with bitwise operations
    jle less
        Push 0
        ret
    less:
        Push 1
        ret

_main:
    mov r9, buffer

    {{ template "stmt" . }}

    section .data
buffer: times 512 dd 0
outmsg: db 0ah
.len: equ $ - outmsg
